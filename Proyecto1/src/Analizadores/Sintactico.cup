package Analizadores;

import java_cup.runtime.*;
import Estructuras.*;
import java.util.ArrayList;
import GUI.*;

parser code
{:
    private ArrayList<Conjunto> listaConj = new ArrayList<Conjunto>();
    private ArrayList<Arbol> arboles = new ArrayList<Arbol>();
    private ArrayList<Validacion> cadenas = new ArrayList<Validacion>();
    private ArrayList<String> conjuntos = new ArrayList<String>();
    private ArrayList<String> nombresConj = new ArrayList<String>();
    private int contador=0;
    private int contadorH=1;

    public Arbol nuevoArbol(String nombre, NodoArbol raiz){
        return new Arbol(nombre, new NodoArbol(raiz, new NodoArbol(null, null, "#", contador, contadorH),".", contador+1, contadorH));
    }
    
    public ArrayList<Arbol> getArboles(){
        return arboles;
    }

    public ArrayList<Validacion> getCadenas(){
        return cadenas;
    }

    public ArrayList<Conjunto> getConjuntos(){
        for(int i=0; i<nombresConj.size();i++){
            listaConj.add(new Conjunto(nombresConj.get(i), conjuntos.get(i)));
        }
        return listaConj;
    }

    public void syntax_error(Symbol s){
        System.err.println("Error Sintáctico en la Línea "+(s.left)+
        ", Columna "+s.right+". No se esperaba este componente: "+s.value+".");
        Principal.errores.add(new ErrorHandler("Error Sintáctico (Recuperado)", "No se esperaba este componente: "+s.value+".", s.right+1, s.left+1));
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("Error sintáctico irrecurable en la Línea "+
        s.left+", Columna "+s.right+". Componente "+s.value+" no reconocido.");
        Principal.errores.add(new ErrorHandler("Error Sintáctico", "No se esperaba este componente: "+s.value+".", s.right+1, s.left+1));
    }
:}


terminal String cadena, letraexp, llaveI, llaveC, dospt, guion, flecha, ptcoma;
terminal String punto, orchar, porcentaje, mas, asterisco, interrog, conjj;
terminal String coma, id, dig, letra, chr, caso1, caso2, caso3, caso4, especial;

non terminal CONJ, CUERPOCONJ, CUERPO2, VALIDACION, INICIO, CUERPO1;
non terminal NodoArbol EXPRESION;
non terminal String REGULAR, LISTA;

start with INICIO;

INICIO::=llaveI CUERPO1 porcentaje porcentaje porcentaje porcentaje CUERPO2 llaveC;

CUERPO1::=CUERPO1 CONJ
            |CUERPO1 REGULAR
            |CONJ
            |REGULAR    
            |error;

CUERPO2::=CUERPO2 VALIDACION
            |VALIDACION
            |error;

VALIDACION::= id:var1 dospt cadena:var2 ptcoma {:RESULT=parser.cadenas.add(new Validacion(var1, var2));:};

REGULAR::=id:var1 guion flecha EXPRESION:var2 ptcoma {:parser.arboles.add(parser.nuevoArbol(var1, var2));contador=0;contadorH=1;:};

EXPRESION::= punto EXPRESION:var1 EXPRESION:var2        {:RESULT=new NodoArbol(var1, var2, ".", parser.contador, parser.contadorH);contador++;:}
            |orchar EXPRESION:var1 EXPRESION:var2       {:RESULT=new NodoArbol(var1, var2, "|", parser.contador, parser.contadorH);contador++;:}
            |mas EXPRESION:var1                         {:RESULT=new NodoArbol(var1, null, "+", parser.contador, parser.contadorH);contador++;:}
            |asterisco EXPRESION:var1                   {:RESULT=new NodoArbol(var1, null, "*", parser.contador, parser.contadorH);contador++;:}
            |interrog EXPRESION:var1                    {:RESULT=new NodoArbol(var1, null, "?", parser.contador, parser.contadorH);contador++;:}
            |letraexp:var1                              {:RESULT=new NodoArbol(null, null, var1, parser.contador, parser.contadorH);contador++;contadorH++;:}
            |dig:var1                                   {:RESULT=new NodoArbol(null, null, var1, parser.contador, parser.contadorH);contador++;contadorH++;:}
            |llaveI id:var1 llaveC                      {:RESULT=new NodoArbol(null, null, var1, parser.contador, parser.contadorH);contador++;contadorH++;:}
            |especial:var1                              {:RESULT=new NodoArbol(null, null, var1, parser.contador, parser.contadorH);contador++;contadorH++;:};

CONJ::= conjj dospt id:var1 guion flecha CUERPOCONJ ptcoma      {:RESULT=parser.nombresConj.add(var1);:}
        | conjj dospt id:var1 guion flecha LISTA:var2 ptcoma    {:RESULT=parser.listaConj.add(new Conjunto(var1, var2));:};

CUERPOCONJ::=caso1:var1              {:RESULT=parser.conjuntos.add(var1);:}
            |caso2:var1              {:RESULT=parser.conjuntos.add(var1);:}
            |caso3:var1              {:RESULT=parser.conjuntos.add(var1);:}
            |caso4:var1              {:RESULT=parser.conjuntos.add(var1);:};

LISTA::=LISTA:var1 coma:var2 dig:var3           {:RESULT=var1+var2+var3;:}
        |LISTA:var1 coma:var2 letra:var3        {:RESULT=var1+var2+var3;:}
        |LISTA:var1 coma:var2 chr:var3          {:RESULT=var1+var2+var3;:}
        |letra:var1                             {:RESULT=var1;:}
        |dig:var1                               {:RESULT=var1;:}
        |chr:var1                               {:RESULT=var1;:};

                 