/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Analizadores.*;
import Estructuras.Arbol;
import Estructuras.ArchivoOLC;
import Estructuras.*;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author khlop
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    private String consola;
    private ArchivoOLC archivo;
    private ArrayList<Arbol> arboles;
    private HiloConsola display;
    private ArrayList<Validacion> cadenas;
    private ArrayList<Conjunto> conjuntos;
    private ArrayList<AFD> afds;
    public static ArrayList<ErrorHandler> errores;
    
    public Principal() {
        initComponents();
        display = new HiloConsola();
        errores = new ArrayList<Estructuras.ErrorHandler>();
        afds = new ArrayList<AFD>();
        display.getjScrollPane1().setBounds(0,0,jPanel2.getWidth(), jPanel2.getHeight());
        jPanel2.add(display.getjScrollPane1());        
        display.setRunning(true);
        display.start();
        consola = "";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();

        jMenuItem1.setText("Abrir");

        jMenuItem7.setText("jMenuItem7");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);
        setSize(new java.awt.Dimension(1057, 637));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setTabSize(4);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel1.setText("Archivo de Entrada: ");

        jButton1.setText("Generar Autómatas");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Analizar Entradas");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setText("Salida");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 503, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jMenu1.setText("Archivo");

        jMenuItem6.setText("Nuevo...");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuItem2.setText("Abrir...");
        jMenuItem2.setBorderPainted(false);
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Guardar");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setText("Guardar como...");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 489, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(325, 325, 325)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if(this.arboles == null){
            consola+="Debe generar autómatas antes de validar cadenas...\n";
            this.updateConsola();
        }else{
            analizarEntradas();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        nuevoArchivo();
        cargarArchivo();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        nuevoArchivo();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.arboles = null;
        this.conjuntos = null;
        this.cadenas = null;
        this.errores = new ArrayList<ErrorHandler>();
        this.afds = new ArrayList<AFD>();
        this.generarAutomatas();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        JFrame parentFrame = new JFrame();
        FileWriter fichero = null;
        PrintWriter pw = null;
        File file;
        String data="";
        if(this.archivo==null){
            this.guardarComo("Guardar");
        }else{
            try{
                fichero = new FileWriter(this.archivo.getRuta());
                pw = new PrintWriter(fichero);
                pw.print(this.jTextArea1.getText());
                this.consola+="Archivo guardado...\n";
                this.updateConsola();
            }catch (Exception e){
                System.out.println("Ocurrió un error...");
                e.printStackTrace();
            }finally{
                try{
                    if(null != fichero){
                        fichero.close();
                    }
                }catch(Exception e2){
                    e2.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        this.guardarComo("Guardar Como...");
        
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }
    
    public void guardarComo(String title){
        JFrame parentFrame = new JFrame();
        FileWriter fichero = null;
        PrintWriter pw = null;
        File file;
        String data = "";
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle(title); 
        fileChooser.setMultiSelectionEnabled(false);
        FileNameExtensionFilter filtro = new FileNameExtensionFilter(null,"olc");
        fileChooser.setFileFilter(filtro);

        int userSelection = fileChooser.showSaveDialog(parentFrame);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            try {
                fichero = new FileWriter(fileChooser.getSelectedFile().getAbsolutePath());
                pw = new PrintWriter(fichero);
                pw.print(this.jTextArea1.getText());
                this.consola+="Archivo guardado...\n";
                this.updateConsola();
                file = fileChooser.getSelectedFile();
                archivo = new ArchivoOLC(file.getName(), data, file.getAbsolutePath());
                this.jLabel1.setText("Archivo de entrada: "+archivo.getNombre());
            } catch (IOException ex) {
                ex.printStackTrace();
            }finally{
                try{
                    if(null != fichero){
                        fichero.close();
                    }
                }catch(Exception e2){
                    e2.printStackTrace();
                }
            }

        }
    }
    
    public void analizarEntradas(){
        String ok;
        FileWriter file = null;
        String reporte = "[\n";
        boolean analizado = false;
        for(Validacion cadena: this.cadenas){
            analizado = false;
            for(AFD afd:this.afds){
                if(afd.getNombre().equals(cadena.getExpresion())){
                    reporte+="  {\n";
                    reporte+="      \"Valor\":\""+cadena.getCadena().replace("\\'", "\\\\'").replace("\\\"", "\\\\\\\"").replace("\\n", "\\\\n")+"\",\n";
                    reporte+="      \"ExpresionRegular\":\""+cadena.getExpresion()+"\",\n";
                    if(afd.validar(cadena.getCadena())){
                        ok = "";
                        reporte+="      \"Resultado\":\"Cadena Valida\"\n";
                    }else{
                        ok = "no ";
                        reporte+="      \"Resultado\":\"Cadena No Valida\"\n";
                    }
                    reporte+="  },\n";
                    consola+="La cadena: "+cadena.getCadena()+", "+ok+"es valida con la expresion: "+cadena.getExpresion()+"...\n";
                    this.updateConsola();
                    analizado = true;
                }
            }
            if(!analizado){
                consola+="La cadena: "+cadena.getCadena()+", no pudo ser analizada con la expresion "+cadena.getExpresion()+"...\n";
                this.updateConsola();
            }
        }
        reporte = reporte.substring(0, reporte.length()-2);
        reporte+="\n]";
         try {
            file = new FileWriter("./Reportes/SALIDAS_201906570/SALIDA-"+this.archivo.getNombre().split(".olc")[0]+".json");
            // Constructs a FileWriter given a file name, using the platform's default charset
            file.write(reporte);
            consola+="\nSalida generada...\n";
            this.updateConsola();
        } catch (Exception e) {
            e.printStackTrace();
 
        } finally {
 
            try {
                file.flush();
                file.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        consola+="\nAnálisis de cadenas terminado...\n";
        this.updateConsola();
        
    }
    
    public void cargarArchivo(){
        JFileChooser selector;
        File file;
        String data;
        data = "";
        selector= new JFileChooser();
        selector.setMultiSelectionEnabled(false);
        FileNameExtensionFilter filtro = new FileNameExtensionFilter(null,"olc");
        selector.setFileFilter(filtro);
        
        if(selector.showDialog(null, null)==JFileChooser.APPROVE_OPTION){
            file = selector.getSelectedFile();
            try{
                Scanner r = new Scanner(file);
                while(r.hasNextLine()){
                    data += r.nextLine()+"\n";
                }
                r.close();
                archivo = new ArchivoOLC(file.getName(), data, file.getAbsolutePath());
                this.consola+="Archivo: " + archivo.getNombre()+", ha sido cargado correctamente...\n\n";
                this.updateConsola();
                this.jLabel1.setText("Archivo de entrada: "+archivo.getNombre());
                this.jTextArea1.setText(archivo.getContent());
            }catch(Exception e){
                e.printStackTrace();
            }
        }    
       
    }
    
    public void generarAutomatas(){
        try{
            if(this.jTextArea1.getText().equals("")){
               consola += "No se ha ingresado un archivo para analizar...\n";
               this.updateConsola();
            }else{
                parser sintactico;
                sintactico = new parser(new Lexico(new StringReader(this.jTextArea1.getText())));
                sintactico.parse();
                if(this.errores.size()>0){
                    this.generarHTML(this.archivo.getNombre().split(".olc")[0]);
                    consola +="Existen errores en la entrada, se generó el reporte de errores...";
                    consola +="\nSe completó el análisis de la entrada...\n\n";
                    this.updateConsola();
                }else{
                    arboles = sintactico.getArboles();
                    conjuntos = sintactico.getConjuntos();
                    cadenas = sintactico.getCadenas();
                    for (int i=0; i<arboles.size();i++){
                        consola+="Analizando: "+arboles.get(i).getNombre()+"\n\n";
                        this.updateConsola();
                        arboles.get(i).graficar();
                        consola+="Árbol generado...\n";
                        this.updateConsola();
                        arboles.get(i).tablaSig();
                        consola+="Tabla de siguientes generada...\n";
                        this.updateConsola();
                        arboles.get(i).tablaTransiciones();
                        consola+="Tabla de transiciones generada...\n";
                        this.updateConsola();
                        arboles.get(i).generarAFD();
                        afds.add(new AFD(arboles.get(i).getNombre(), arboles.get(i).getEstados(), 
                                arboles.get(i).getTerminales(), arboles.get(i).getRaiz().getRs().getNumHoja(), this.conjuntos));
                        consola+="AFD generado...\n";
                        this.updateConsola();
                        arboles.get(i).generarAFN();
                        consola+="AFN generado...\n";
                        this.updateConsola();
                        consola +="\nGeneración de autómatas terminado...\n\n";
                        this.updateConsola();
                    }
                }
            }
        }catch(Exception e){
            e.printStackTrace();
        }
    }
    
    public void updateConsola(){
        this.display.setText(consola);
    }
    
    public void nuevoArchivo(){
        this.jLabel1.setText("Archivo de Entrada:");
        this.jTextArea1.setText("");
        consola="";
        this.updateConsola();
        this.archivo = null;
        this.arboles = null;
        this.conjuntos = null;
        this.cadenas = null;
        this.errores = new ArrayList<ErrorHandler>();
        this.afds = new ArrayList<AFD>();
    }
    
    public static void generarHTML(String nombre) throws IOException{
        FileWriter fichero = null;
                PrintWriter pw = null;
                try {
                    fichero = new FileWriter("./Reportes\\\\ERRORES_201906570\\\\ERRORES-"+nombre+".html");
                    pw = new PrintWriter(fichero);
                    //comenzamos a escribir el html
                    pw.println("<html>");
                    pw.println("<head><title>REPORTE DE ERRORES</title></head>");
                    pw.println("<body>");
                    pw.println("<div align=\"center\">");
                    pw.println("<h1>Reporte de Errores</h1>");
                    pw.println("<br></br>");
                    pw.println("<table border=1>");
                    pw.println("<tr>");
                    pw.println("<td bgcolor=green>TIPO</td>");
                    pw.println("<td bgcolor=green>DESCRIPCION</td>");
                    pw.println("<td bgcolor=green>FILA</td>");
                    pw.println("<td bgcolor=green>COLUMNA</td>");
                    pw.println("</tr>");
                    for(int i=0;i<errores.size();i++){
                        pw.println("<tr>");
                        pw.println("<td>"+errores.get(i).getTipoError()+"</td>");
                        pw.println("<td>"+errores.get(i).getValorError()+"</td>");
                        pw.println("<td>"+errores.get(i).getFila()+"</td>");
                        pw.println("<td>"+errores.get(i).getColumna()+"</td>");
                        pw.println("</tr>");
                    }
                    pw.println("</table>");
                    pw.println("</div");
                    pw.println("</body>");
                    pw.println("</html>");
                } catch (Exception e) {
                }finally{
                    if(null!=fichero){
                            fichero.close();
                    }
                }
                try {
            //Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + "Reportes\\"+"Reporte ErroresL.html");
            //System.out.println("Final");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
